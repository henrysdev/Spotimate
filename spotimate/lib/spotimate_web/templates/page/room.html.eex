<!doctype html>
<html>
  <head>
    <title>Spotimate - <%= @room_name %></title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css"
        integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47"
        crossorigin="anonymous">
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
      // Fetch most recent playhead from server
      function fetch_playhead(device_id, csrf_token) {
        const Http = new XMLHttpRequest();
        const url='http://localhost:4000/api/room/listen';
        const params=`device_id=${device_id}`
        Http.open("POST", url, true);
        Http.responseType = 'json';
        Http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        Http.setRequestHeader('X-CSRF-Token', csrf_token);
        Http.send(params);
        return Http;
      }

      // While listener remains on page, play through
      function sync_playhead(device_id, csrf_token) {
        // Simulate tail-call optimization to prevent stack overflow
        function play_loop() {
          Http = fetch_playhead(device_id, csrf_token);
          Http.onreadystatechange = function() {
            if (this.readyState == 4) {
              const deadline_utc = JSON.parse(Http.response)['deadline_utc'];
              let remaining_ms = deadline_utc -  Date.now()

              // If deadline exceeded, check again every second
              if (remaining_ms <= 0) {
                remaining_ms = 1000;
              }
              console.log("deadline_utc: ", deadline_utc);
              console.log("remaining_ms: ", remaining_ms);
              
              // Wait remaining time of song to update playhead
              setTimeout(
                () => play_loop(),
              remaining_ms);
            }
          }
        }
        return play_loop();
      }
      
      window.onSpotifyWebPlaybackSDKReady = () => {
        const access_token = "<%= raw @access_token %>";
        const csrf_token = <%= raw Poison.encode!(Plug.CSRFProtection.get_csrf_token()) %>
        const player = new Spotify.Player({
          name: 'Spotimate Player',
          getOAuthToken: cb => { cb(access_token); }
        });

        // Error handling
        player.addListener('initialization_error', ({ message }) => { console.error(message); });
        player.addListener('authentication_error', ({ message }) => { console.error(message); });
        player.addListener('account_error', ({ message }) => { console.error(message); });
        player.addListener('playback_error', ({ message }) => { console.error(message); });

        // Playback status updates
        player.addListener('player_state_changed', state => { console.log(state); });

        // Ready
        player.addListener('ready', ({ device_id }) => {
          
          sync_playhead(device_id, csrf_token);
          var player = new Spotify.Player({
            name: 'Spotimate Player',
            getOAuthToken: callback => {
              // Run code to get a fresh access token
              callback(access_token);
            },
            volume: 1.0
          });
        });
        player.connect();
        player.resume();
      };
    </script>
  </head>
  <body>
    <%= render SpotimateWeb.ComponentView, "top_nav.html", conn: @conn %>
  </body>
</html>